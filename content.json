{"meta":{"title":"Onece || Aaras","subtitle":null,"description":null,"author":"极度简单.","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-04-08T15:44:47.396Z","updated":"2022-04-08T16:20:39.261Z","comments":true,"path":"2022/04/08/hello-world/","link":"","permalink":"http://example.com/2022/04/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 我的博客第一篇文章","categories":[],"tags":[]},{"title":"DOM笔记","slug":"DOM笔记","date":"2022-03-29T10:37:25.695Z","updated":"2022-04-08T17:50:13.806Z","comments":true,"path":"2022/03/29/DOM笔记/","link":"","permalink":"http://example.com/2022/03/29/DOM%E7%AC%94%E8%AE%B0/","excerpt":"","text":"一、DOM 的介绍1231.*当创建好一个页面并加载到浏览器时，DOM就悄然而生！！！，它会把网页文档（html页面）转换为一个文档对象，*主要功能是处理网页内容，dom就是操作页面中的元素！！！2.顶级对象是 document, 通过 document 提供的一系列方法能够获取到对应的元素，是一个DOM对象3.可以操作元素的样式、属性、内容 二、获取元素的方法、事件的格式1234567891011121314151617181920212223//只能获取唯一id的元素，所以不带“s”document.getElementById() //获取元素的类名，可以批量获取所以带“s”，获取的元素会被放置在一个伪数组中，不能调用forEach方法，但是有length属性document.getElementsByClassName() //通过标签名获取元素，可以批量获取所以带“s”，获取的元素会被放置在一个伪数组中，不能调用forEach方法，但是有length属性document.getElementsByTagName()//通过表单的name属性获取元素，可以批量获取所以带“s” 输出的类型为 - NodeList，一般只用于获取表单元素，能调用forEach方法，有length属性document.getElementsByName()//HTML5 更新的选择器，选择单个的元素，有兼容性问题，一定要加选择符document.querySelector()//获取更多的元素，一般用于获取类名或者标签名的元素，结果为多个，是NodeList结构，可以使用 forEach方法document.querySelectorAll()//获取HTMl节点document.documentElement//获取body节点documnet.body 123456789101112131415164.注册事件的格式是，事件源.事件 = 事件处理程序btn.onclick = function() &#123;&#125;// 批量注册事件 for(var i = 0; i &lt; lis.length; i++) &#123; lis[i].onclick = function() &#123; // code &#125;&#125;//数组的forEach方法遍历lis.forEach(function(el) &#123; el.onclick = function() &#123; &#125;&#125;) 12345678//注意事项选择器的新方法和旧方法，都只会呈现两种状态1. 通过 getElementById 或者 querySelector 直接获取的元素 可以对 DOM 对象直接操作，注册事件，操作样式...2. 通过其他方法获取的元素，由于是伪数组，并不能直接操作 要么使用下标索引的方式提取出来 boxs[i] 要么使用 for 循环或者 forEach 的方式遍历操作 三、事件的类型12345//鼠标事件1.onclick 单击 2.onndblclick 双击 3.onmousemove 鼠标移动4.onmouseover &amp;&amp; onmouseout 移入移出 //这个会有冒泡特性，所以一般用的少5.onmouseenter &amp;&amp; onmouseleave 移入移出 //这个没有冒泡特性6.onmousedown 鼠标按下 onmouseup 鼠标弹起 12345//键盘事件1.onkeydown 键盘按下 2.onkeyup 键盘弹起 3.onkeypress 键盘按压4.event.keyCode 键码//onkeydown 和 onkeypress 区别？onkeypress区分大小写，对应的键码会不一样，不识别系统按键 12//表单事件1.onfocus 获得焦点 2.onblur 失去焦点 3.oninput 输入事件 4.onchange 当内容改变 1234系统内置事件 window.onload = &#123;&#125;// 会等待body中的内容全部渲染完毕再会执行事件赋值的函数，不需要我们手动调用，是浏览器内部由window进行处理 1、案例：鼠标移入高亮显示123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; ul,li&#123; list-style: none; &#125; a&#123; text-decoration: none; &#125; .list&#123; width: 200px; height: 150px; border: 1px solid black; &#125; .list li&#123; width: 200px; height: 50px; background-color: hotpink; text-align: center; line-height: 50px; &#125; .list li:nth-child(2)&#123; border-top: 1px solid black; border-bottom: 1px solid black; box-sizing: border-box; &#125; .list li a&#123; font-size: 20px; color: white; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;大哥的桂芬&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;大哥的秀琴&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;大哥的诸葛钢铁&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onload = function() &#123; var liNodes = document.querySelectorAll(&#x27;.list &gt; li&#x27;); for (var i = 0; i &lt; liNodes.length; i++) &#123; liNodes[i].onmouseover = function() &#123; this.style.backgroundColor = &#x27;red&#x27;; &#125;; liNodes[i].onmouseout = function() &#123; this.style.backgroundColor = &#x27;green&#x27;; &#125; &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 2、keyCode思考：如何区分按下的是哪个键，所以需要区分键 区分键位，我们需要通过键码(keyCode)去区分，每次触发事件时，都会在事件的回调函数中有一个事件对象(event)，事件对象就是回调函数的第一个参数，每一次触发事件时，系统会自定帮我们把这一次触发事件的相关信息封装为一个事件对象，系统会把这个事件对象传给回调函数的第一个形参 12345678910111213&lt;input type=&quot;text&quot; /&gt;&lt;script type=&quot;text/javascript&quot;&gt; window.onload = function() &#123; var inputNode = document.querySelector(&quot;input&quot;); inputNode.onkeyup = function(e) &#123; if (e.keyCode === 13) &#123; console.log(&quot;回车&quot;); &#125; else if (e.keyCode === 16) &#123; console.log(&quot;shift&quot;); &#125; &#125; &#125;&lt;/script&gt; 3、案例：全选、全不选、反选（***）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .box &#123; width: 300px; margin: 100px auto; &#125; ul &#123; list-style: none; &#125; li &#123; line-height: 40px; margin-bottom: 10px; &#125; .box-content &#123; margin-top: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;box-top&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;checkAll&quot;&gt; 全选 &lt;button id=&quot;btn&quot;&gt;真正的反选&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;box-content&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=&quot;checkbox&quot;&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; //获取对应的元素 var checkAll = document.querySelector(&#x27;#checkAll&#x27;) var btn = document.querySelector(&#x27;#btn&#x27;) var box = document.querySelector(&#x27;.box-content&#x27;) // 获取底部盒子内的所以input var ipts = box.querySelectorAll(&#x27;input&#x27;) // 注册事件 全选和全不选,这个是全选和全不选按钮事件 checkAll.onclick = function() &#123; ipts.forEach(function(el)&#123; el.checked = checkAll.checked &#125;) &#125; //反选 ipts.forEach(function(el)&#123; el.onclick = function() &#123; //需要再给下面的5个复选框遍历，只要有一个未选中，就结束循环 // var bool = true // for(var i = 0;i &lt; ipts.length;i++)&#123; // // 取反 // if(!ipts[i].checked)&#123; // bool = false // break // &#125; // &#125; var arr = Array.of(ipts) var bool = arr.every(function(val)&#123; return val.checked &#125;) checkAll.checked = bool &#125; &#125;) btn.onclick = function() &#123; ipts.forEach(function(el) &#123; el.checked = !el.checked &#125;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 四、批量注册事件&amp;&amp;排他思想（**）干掉所有人，留下我自己 12345678910111213141516171819202122232425// 排他思想第一步就是要操作所有的元素，那么就一定要遍历获取到的元素.forEach(function(el) &#123; el.onclick = function() &#123; //先把所有的元素样式去掉 排他思想 获取到的元素.forEach(function(item) &#123; item.style = &#x27;&#x27; &#125;) //当前的元素单独添加样式 el.style.color = &#x27;skyblue&#x27; &#125;&#125;)for (var i = 0; i &lt; 获取到的元素.length; i++) &#123; 获取到的元素[i].onclick = function () &#123; //先把所有的元素样式去掉 排他思想 for (var j = 0; j &lt; 获取到的元素.length; j++) &#123; 获取到的元素[j].className = &quot; &quot;; &#125; //当前的元素单独添加样式 this.className = this.className + &quot;active&quot;; &#125;&#125;1.在循环结束的后面，单独给自己设置样式2.获取到的元素[i] this el 都代表自身元素 1、案例：选项卡（***)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #box button&#123; width: 80px; height: 40px; background-color: hotpink; color: #fff; margin-right: 25px; &#125; #box div&#123; width: 300px; height: 100px; background-color: aqua; &#125; .cls&#123; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;box&quot;&gt; &lt;button&gt;飞天&lt;/button&gt; &lt;button&gt;遁地&lt;/button&gt; &lt;button&gt;无所不能&lt;/button&gt; &lt;div&gt;sczd az ada&lt;/div&gt; &lt;div&gt;a cads axc &lt;/div&gt; &lt;div&gt; acasdf q&lt;/div&gt; &lt;/div&gt; &lt;script&gt; var box = document.querySelector(&#x27;#box&#x27;) var btns = box.querySelectorAll(&#x27;button&#x27;) var Div = box.querySelectorAll(&#x27;div&#x27;) Div.forEach(function(el,index)&#123; el.onclick = function() &#123; btns.forEach(function(item,i)&#123; item.className = &quot; &quot; Div[i].style.display = &quot;none&quot; &#125;) el.className = &quot;cls&quot; Div[index].style.display = &quot;block&quot; &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 2、轮播图根据点的索引更改透明度（*）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; ul, ol &#123; position: relative; list-style: none; &#125; body &#123; padding: 20px; &#125; ul li &#123; position: absolute; top: 0; left: 0; width: 300px; height: 200px; transition: all 0.3s ease-in; &#125; ul li:first-of-type &#123; z-index: 1; &#125; ul li img &#123; width: 100%; height: 100%; &#125; ol &#123; z-index: 999; display: flex; &#125; ol li &#123; width: 10px; height: 10px; background-color: #333; margin: 10px; border-radius: 50%; &#125; .cls &#123; background-color: #f8f8f8; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;img src=&quot;../1.imgs/01.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../1.imgs/02.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../1.imgs/03.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;../1.imgs/04.webp&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ol&gt; &lt;li class=&quot;cls&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;script&gt; var ol = document.querySelector(&#x27;ol&#x27;) console.log(ol); var ollis = ol.querySelectorAll(&#x27;li&#x27;) console.log(ollis); var ul = document.querySelector(&#x27;ul&#x27;) console.log(ul); var ullist = ul.querySelectorAll(&#x27;li&#x27;) console.log(ullist); ollis.forEach(function(el,index)&#123; el.onmouseenter= function() &#123; ollis.forEach(function(item,i)&#123; item.className = &quot; &quot; ullist[i].style.opacity = 0 &#125;) this.className = &#x27;cls&#x27; console.log(this); ullist[index].style.opacity = 1 &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 3、二级菜单（***）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; ul &#123; list-style: none; &#125; a &#123; text-decoration: none; color: #333; &#125; .content &#123; margin: 100px auto; padding: 20px 120px; background-color: #ccc; &#125; .nav &#123; display: flex; &#125; .nav li &#123; position: relative; padding: 5px 10px; margin: 0 5px; background-color: #eee; &#125; .nav ul &#123; position: absolute; top: 30px; left: 0; display: none; &#125; /* .nav li:hover ul &#123; display: block; &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;content&quot;&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;span&gt;这是第01项&lt;/span&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;span&gt;这是第02项&lt;/span&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;span&gt;这是第03项&lt;/span&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;span&gt;这是第04项&lt;/span&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;javascript:;&quot;&gt;&lt;span&gt;这是第05项&lt;/span&gt;&lt;/a&gt; &lt;ul&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;li&gt;这是二级菜单&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; var lis = document.querySelectorAll(&#x27;.nav &gt; li&#x27;) console.log(lis); lis.forEach(function(el)&#123; el.onmouseenter = function()&#123; lis.forEach(function(item)&#123; var ulbox = item.querySelector(&#x27;ul&#x27;) ulbox.style.display = &quot;none&quot; &#125;) var curul = el.querySelector(&#x27;ul&#x27;) curul.style.display = &quot;block&quot; &#125; el.onmouseleave = function()&#123; var curul = el.querySelector(&#x27;ul&#x27;) curul.style.display = &quot;none&quot; &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 五、操作元素的样式、属性、内容操作样式：行内样式、类样式1234567891011121314行内样式：//操作DOM对象的行内样式获取的DOM对象.style.样式属性 = &#x27;值&#x27;// 如果样式属性中间有中横线，横杠后面的首字母拼接之后需要大写font-size =&gt; fontSize// 如果设置的样式为多个 box.style = &#x27;color: red; font-size: 30px;&#x27;类样式：//操作DOM对象的类样式获取的DOM对象.className = &#x27;&#x27;//赋值的类名，会覆盖原先的类名，如果都要实现样式，一定要在字符串中同时设置box.className = &#x27;demo cls&#x27;//ps:要添加的类名，一定是 css 样式表中提前声明好的类名 操作属性：Attribute（**）1234567891011//操作标签的属性 Attribute方法getAAttribute 获取属性值 setAttribute 设置属性和值 removeAttribute 移除属性//DOM元素的对象属性，操作DOM元素的对象属性和原始操作OBject的属性一样，使用打点或者中括号的方式console.dir()//可以展开DOM对象的详情1.早期，标签的自定义属性不会添加到dom对象中，dom对象中添加的属性，不会映射到标签上//HTML5 更新了一种格式，打破了这个规则2.只要是在标签中添加的 data- 开头的属性，会被写入到dom对象的 dataset 属性中3.只要是通过 DOM 对象设置的属性，会自动映射到标签的属性上，并且自动加上 data- 标识4.如果在标签上用了中横线，在获取的时候要写小驼峰，如果设置的js属性是小驼峰，会自动解析为中横线 操作内容：innerHTML、innerText、textContent、value（***）123456789101112操作内容：//可以获取和设置元素的内容innerHTML 和 innerText1.innerHTML 可以获取到标签，在设置的时候也会识别并渲染标签2.innerText 只会获取纯文本//innerText 和 textContent1.innerText 只会获取纯文本2.textContent 只有 IE8 以上才能识别和使用3.textContent 能获取隐藏元素的内容，并且保留内容的换行格式//value：表单属性,表单的内容是通过value获取的console.log(input.value) 1、案例：兼容性封装读写内容1123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;pp&quot;&gt;老马&lt;/p&gt; &lt;script type=&quot;text/javascript&quot;&gt; //如果用户使用的是高级浏览器就自动的通过textContent去操作内容 //如果用户使用的是低级浏览器就自动的通过innerText去操作内容 var pNode = document.getElementById(&#x27;pp&#x27;); // console.log(pNode.textContent);不能直接写，因为这样只能满足高级浏览器的用户操作内容，低级浏览器不能 // console.log(getOrSetContent(pNode));//兼容性获取P内部的内容 getOrSetContent(pNode, &#x27;老马过河&#x27;); //兼容性设置p内部的内容 function getOrSetContent(node, content) &#123; if (arguments.length === 1) &#123; //在获取内容 if (node.textContent) &#123; //证明是高级 return node.textContent; &#125; else &#123; //低级浏览器 return node.innerText; &#125; &#125; else if (arguments.length === 2) &#123; //在设置内容 if (node.textContent) &#123; //证明是高级 node.textContent = content; &#125; else &#123; //低级浏览器 node.innerText = content; &#125; &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 2、案例：兼容性封装读写内容2（优化）1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;pp&quot;&gt;老马&lt;/p&gt; &lt;script type=&quot;text/javascript&quot;&gt; //如果用户使用的是高级浏览器就自动的通过textContent去操作内容 //如果用户使用的是低级浏览器就自动的通过innerText去操作内容 var pNode = document.getElementById(&#x27;pp&#x27;); // console.log(pNode.textContent);不能直接写，因为这样只能满足高级浏览器的用户操作内容，低级浏览器不能 // console.log(getOrSetContent(pNode));//兼容性获取P内部的内容 getOrSetContent(pNode, &#x27;老马过河&#x27;); //兼容性设置p内部的内容 //函数优化 function getOrSetContent(node, content) &#123; if (arguments.length === 1) &#123; //在获取内容 // return node.textContent?node.textContent:node.innerText return node.textContent || node.innerText; &#125; else if (arguments.length === 2) &#123; //在设置内容 node.textContent ? node.textContent = content : node.innerText = content; &#125; &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 六、节点操作1、什么是节点​ 什么是节点，节点的类型有哪些，我们需要学习哪些节点，节点的关系是什么样的。 ​ 在 DOM 树中，组成的最小单位就是节点 (Node)，当网页在浏览器中打开的时候，就会把所有的页面内容渲染成对应节点，每一个节点都会有 nodeType, nodeValue, nodeName 三个属性 ​ 节点一共有 12 种类型，还分别编号了，元素节点1，属性节点2，文本节点3，注释节点8 2、总结： nodeType nodeName nodeValue 元素节点 1 元素名大写 null 属性节点 2 属性名 属性值 文本节点 3 #text 文本内容 注释节点 8 #comment 注释内容 12345678910111.node.nodeType功能：返回节点类型，只读console.log(div,nodeType)2.node.nodeName功能：返回元素的标签名，以大写形式表示，只读consloe.log(div.nodeName);3.nodeValue功能：返回text或Comment（注释）节点的文本内容，可读写consloe.log(div.nodeValue); 3、操作节点的方法123456789101112131415161718192021222324252627获取元素只需要记住：children 子元素节点 parentNode 父节点 nextElementSibling 下一个兄弟元素节点 previousElementSibling 上一个兄弟元素节点//创建元素,有返回值，是一个dom对象，可以设置事件，赋值内容，但是不会立马在网页中呈现doucment.createElement(&#x27;标签名&#x27;)//删除box.removeChild() //删子元素，一定要传入要删除的那个节点box.remove() //删自己，不需要传参//添加父盒子.insertBefore(参数1，参数2)参数1：要添加的那个新节点参数2：参考父盒子内的指定子节点父盒子.appendChild(参数)参数：要添加的子节点，会在父盒子的队尾出现//替换父盒子.replaceChild(参数1，参数2)参数1：要替换的那个新节点参数2：在父盒子内要被替换的指定子节点//拓展 cloneNode()没有参数：只会克隆一层盒子有参数为true：会深层克隆整个盒子只克隆的话，不会在页面中同步出现 4、事件注册的 DOM2 方式123456box.addEventListener(&#x27;事件名称&#x27;， function() &#123; // 事件处理程序&#125;)// 如果你需要解绑，一定要把注册事件的回调函数写出来，并且命名box.removeEventListener(&#x27;事件名称&#x27;, 事件处理函数的名称)","categories":[],"tags":[]}],"categories":[],"tags":[]}